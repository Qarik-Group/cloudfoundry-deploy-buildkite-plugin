#!/bin/bash

set -euo pipefail

env | sort

(
  # cf api
  args=()
  args+=("$BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_API")

  [[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_SKIP_SSL_VALIDATION:-}" ]] && {
    args+=("--skip-ssl-validation")
  }

  echo "--- :cloudfoundry: Running cf api"
  echo -ne '\033[90m$\033[0m cf api ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo

  cf api "${args[@]}"
)

(
  args=()

  if [[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_USERNAME:-}" ]]; then
    args+=("${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_USERNAME}")
  else
    if [[ -z "${CF_USERNAME:-}" ]]; then
      echo "ERROR: must provide \$CF_USERNAME or 'username' property"
      exit 1
    fi
  fi

  # [[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_PASSWORD_ENV:-}" ]] && {
  #   export CF_PASSWORD="${!BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_PASSWORD_ENV}"
  # }

  echo "--- :cloudfoundry: Running cf auth"
  echo -ne '\033[90m$\033[0m cf auth ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo

  cf auth "${args[@]}"
)

(
  args=()

  args+=("-o" "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_ORGANIZATION}")
  args+=("-s" "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_SPACE}")

  echo "--- :cloudfoundry: Running cf target"
  echo -ne '\033[90m$\033[0m cf target ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo

  cf target "${args[@]}"
)

(
  args=()

  [[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_MANIFEST_PATH:-}" ]] && {
    args+=("-f" "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_MANIFEST_PATH}")
  }

  echo "--- :cloudfoundry: Running cf push"
  echo -ne '\033[90m$\033[0m cf push ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo

  cf push "${args[@]}"
)

(
  args=()

  app_guid="$(cf app "$BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_APPNAME" --guid)"
  args+=("/v3/apps/${app_guid}" "-X" "PATCH" "-d")

  commit_sha="$(git rev-parse --short HEAD)"
  origin_url="$(git config remote.origin.url)"

  annotation_json='{}'
  annotation_json=$(jq -rc --arg annotation "git-commit"       --arg value "$commit_sha" '.[$annotation] = $value' <<< "$annotation_json")
  annotation_json=$(jq -rc --arg annotation "git-origin-url"   --arg value "$origin_url" '.[$annotation] = $value' <<< "$annotation_json")
  annotation_json=$(jq -rc --arg annotation "buildkite-job-id" --arg value "$BUILDKITE_JOB_ID" '.[$annotation] = $value' <<< "$annotation_json")

  [[ -n "${BUILDKITE_PROJECT_SLUG:-}" ]] && {
    buildkite_url="https://buildkite.com/$BUILDKITE_PROJECT_SLUG/builds/$BUILDKITE_BUILD_NUMBER#$BUILDKITE_BUILD_ID"
    annotation_json=$(jq -rc --arg annotation "buildkite-url"    --arg value "$buildkite_url" '.[$annotation] = $value' <<< "$annotation_json")
  }

  patch_json=$(jq -rc '{"metadata": {"annotations": .}}' <<< "$annotation_json")
  args+=("$patch_json")

  echo "--- :cloudfoundry: Setting annotations"
  echo -ne '\033[90m$\033[0m cf curl ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo
  cf curl "${args[@]}"

)