#!/bin/bash

set -euo pipefail

PLUGIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
plugin_version=$(cat "$PLUGIN_DIR/version")

env | sort

CF_APPNAME=$BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_APPNAME
CF_APPNAME_VENERABLE="${CF_APPNAME}-venerable"

[[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_PASSWORD_ENV:-}" ]] && {
  export CF_PASSWORD="${!BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_PASSWORD_ENV:?required}"
}
: "${CF_PASSWORD:?required for 'cf auth'}"

# From https://buildkite.com/docs/pipelines/links-and-images-in-log-output#links
function inline_link_v2 {
  LINK=$(printf "url='%s'" "$1")

  if [ $# -gt 1 ]; then
    LINK=$(printf "$LINK;content='%s'" "$2")
  fi

  # printf '%s' "$LINK"
  printf '\033]1339;%s\a\n' "$LINK"
}

function docker_run {
(
  mkdir -p tmp/home

  docker container run \
    -v "$PWD:/workspace" \
    -e CF_HOME=/workspace/tmp/home \
    -e CF_PASSWORD \
    --label "cloudfoundry-deploy-buildkite-plugin-version=$plugin_version" \
    --workdir /workspace \
    "${DOCKER_RUN:-starkandwayne/cloudfoundry-deploy-buildkite-plugin}" \
    "$@"
)
}

function buildkite_agent_docker_cleanup {
  docker_run rm -rf /workspace/tmp
}
trap buildkite_agent_docker_cleanup INT TERM ERR EXIT QUIT SIGQUIT

(
  # cf api
  args=()
  args+=("$BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_API")

  [[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_SKIP_SSL_VALIDATION:-}" ]] && {
    args+=("--skip-ssl-validation")
  }

  echo "--- :cloudfoundry: Running cf api"
  echo -ne '\033[90m$\033[0m cf api ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo

  docker_run cf api "${args[@]}"
)

(
  args=()

  if [[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_USERNAME:-}" ]]; then
    args+=("${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_USERNAME}")
  else
    if [[ -z "${CF_USERNAME:-}" ]]; then
      echo "ERROR: must provide \$CF_USERNAME or 'username' property"
      exit 1
    fi
  fi

  echo "--- :cloudfoundry: Running cf auth"
  echo -ne '\033[90m$\033[0m cf auth ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo

  docker_run cf auth "${args[@]}"
)

(
  args=()

  args+=("-o" "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_ORGANIZATION}")
  args+=("-s" "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_SPACE}")

  echo "--- :cloudfoundry: Running cf target"
  echo -ne '\033[90m$\033[0m cf target ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo

  docker_run cf target "${args[@]}"
)

[[ -z "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_SKIP_ZERO_DOWNTIME:-}" ]] && {
(
  echo "--- :cloudfoundry: Renaming app $CF_APPNAME -> $CF_APPNAME_VENERABLE (if necessary)"
  if docker_run cf app "$CF_APPNAME" 2>/dev/null >/dev/null ; then
    echo "--> Found app $CF_APPNAME"

    container0_status=$(docker_run cf app "$CF_APPNAME" 2>/dev/null | grep "^#0" | awk '{print $2}')
    if [[ "${container0_status:-unknown}" == "running" ]]; then
      echo "--> Confirmed app $CF_APPNAME #0 instance 'running'"

      if docker_run cf app "$CF_APPNAME_VENERABLE" 2>/dev/null >/dev/null ; then
        echo "--> Found app $CF_APPNAME_VENERABLE; deleting it."
        docker_run cf delete "$CF_APPNAME_VENERABLE" -f
      fi

      docker_run cf rename "$CF_APPNAME" "$CF_APPNAME_VENERABLE"
    else
      echo "--> App $CF_APPNAME #0 instance state '$container0_status', deleting it"

      docker_run cf delete "$CF_APPNAME" -f
    fi
  else
    echo "--> App $CF_APPNAME does not exist, nothing to do."
  fi
)
}

(
  args=()

  [[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_MANIFEST_PATH:-}" ]] && {
    args+=("-f" "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_MANIFEST_PATH}")
  }

  [[ -n "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_VARS:-}" ]] && {
    vars_yml=tmp/vars.yml
    echo "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_VARS}" > "$vars_yml"
    args+=("--vars-file" tmp/vars.yml)
  }

  echo "--- :cloudfoundry: Running cf push"
  echo -ne '\033[90m$\033[0m cf push ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo

  docker_run cf push "${args[@]}"
)

app_guid="$(docker_run cf app "$BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_APPNAME" --guid)"

(
  args=()
  args+=("/v3/apps/${app_guid}" "-X" "PATCH" "-d")

  commit_sha="$(git rev-parse --short HEAD)"
  origin_url="$(git config remote.origin.url)"

  labels_json='{}'
  labels_json=$(jq -rc --arg cflabel "cloudfoundry-deploy-buildkite-plugin-version" --arg value "$plugin_version" '.[$cflabel] = $value' <<< "$labels_json")

  annotation_json='{}'
  annotation_json=$(jq -rc --arg annotation "git-commit"       --arg value "$commit_sha" '.[$annotation] = $value' <<< "$annotation_json")
  annotation_json=$(jq -rc --arg annotation "git-origin-url"   --arg value "$origin_url" '.[$annotation] = $value' <<< "$annotation_json")

  [[ -n "${BUILDKITE_PROJECT_SLUG:-}" ]] && {
    buildkite_url="https://buildkite.com/$BUILDKITE_PROJECT_SLUG/builds/$BUILDKITE_BUILD_NUMBER#$BUILDKITE_BUILD_ID"
    annotation_json=$(jq -rc --arg annotation "buildkite-url" --arg value "$buildkite_url" '.[$annotation] = $value' <<< "$annotation_json")
  }

  patch_json=$(jq -src '.[0] * .[1]' \
    <(jq -rc '{"metadata": {"labels": .}}' <<< "$labels_json") \
    <(jq -rc '{"metadata": {"annotations": .}}' <<< "$annotation_json") \
  )
  args+=("$patch_json")

  echo "--- :cloudfoundry: Setting labels and annotations"
  echo -ne '\033[90m$\033[0m cf curl ' >&2

  # Print all the arguments, with a space after, properly shell quoted
  printf "%q " "${args[@]}"
  echo
  docker_run cf curl "${args[@]}"

)

[[ -z "${BUILDKITE_PLUGIN_CLOUDFOUNDRY_DEPLOY_SKIP_ZERO_DOWNTIME:-}" ]] && {
(
  echo "--- :cloudfoundry: Clean up venerable app"
  if docker_run cf app "$CF_APPNAME" 2>/dev/null >/dev/null ; then
    echo "--> Confirmed found app $CF_APPNAME"

    container0_status=$(docker_run cf app "$CF_APPNAME" 2>/dev/null | grep "^#0" | awk '{print $2}')
    if [[ "${container0_status:-unknown}" == "running" ]]; then
      echo "--> Confirmed #0 instance running"

      if docker_run cf app "$CF_APPNAME_VENERABLE" 2>/dev/null >/dev/null ; then
        echo "--> Found app $CF_APPNAME_VENERABLE; deleting it."
        docker_run cf delete "$CF_APPNAME_VENERABLE" -f
      fi
    fi
  fi
)
}

DEPLOYED_URL=https://$(docker_run cf curl "/v3/apps/${app_guid}/routes" | jq -r ".resources[0].url")
export DEPLOYED_URL
(
  cat <<EOF | buildkite-agent annotate --context cf-app-status
Initial status of application:

\`\`\`plain
$(docker_run cf app "$CF_APPNAME")
\`\`\`

Labels and annotations added to application:

\`\`\`json
$(docker_run cf curl "/v3/apps/${app_guid}" | jq -r ".metadata")
\`\`\`
EOF

  cat <<EOF | buildkite-agent annotate --style info --context cf-app-url
Deployed to $DEPLOYED_URL.
EOF
)
